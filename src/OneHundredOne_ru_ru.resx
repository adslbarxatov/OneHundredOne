<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="HelpText" xml:space="preserve">
    <value>Игра «сто одно»

Используется колода в 36 карт. Каждому игроку сдаётся по 4 карты. Последняя выдаваемая карта кладётся на стол рядом с оставшейся колодой (т.е. раздающий выполняет первый ход). Следующий игрок покрывает эту карту одной или несколькими из имеющихся у него карт, в зависимости от ситуации (см. ниже). Если вариантов нет, можно взять одну дополнительную карту из колоды. Если вариантов всё равно нет, игрок пропускает ход.

Каждый следующий игрок делает то же самое. Если карты на руках заканчиваются, игрок выходит из раунда. Раунд заканчивается тогда, когда остаётся лишь один человек за столом, который имеет карты на руках. Для парной игры выход одного игрока совпадает с завершением раунда.

По оставшимся картам считаются штрафные очки игрока. Также по тем картам, которыми остальные игроки завершили раунд, определяются их бонусы. В итоге, если чьи-то очки превышают 101, он считается проигравшим. Если игрок получает ровно 101 очко, его штраф обнуляется.

Покрыть любую карту можно тремя способами:
— картой той же масти;
— картой того же номинала;
— любой дамой.

В случае с дамой от игрока требуется «заказать» масть, которая будет ему наиболее удобна для продолжения игры. Противник должен будет покрыть даму картой заказанной масти или другой дамой.

Некоторые карты обязывают противника пропускать ход и/или брать дополнительные карты из колоды. Это позволяет игроку выстраивать порой достаточно длинные цепочки и быстро избавляться от карт. К таким картам относятся:
— все тузы (противник должен пропустить ход);
— все семёрки (противник должен пропустить ход и взять 1 карту);
— все шестёрки (противник должен пропустить ход и взять 2 карты);
— король пик (противник должен пропустить ход и взять 5 карт);
— все восьмёрки (противник должен пропустить ход, однако игрок обязан покрыть восьмёрку, используя свои карты или добирая карты из колоды, даже если свои уже кончились).
Остальные карты после использования требуют только перехода хода.

Штрафные очки считаются следующим образом:
— каждая шестёрка, семёрка, восьмёрка и десятка добавляют к сумме свой номинал;
— валет добавляет 2 очка, дама – 3, король – 4, туз – 11;
— девятки не влияют на счёт.

Бонусы считаются следующим образом:
— если игрок выходит из раунда, покрывая карту пиковой дамой, от его штрафа отнимается 40 очков;
— если игрок выходит с любой другой дамой, отнимается 20 очков.
По этой причине очки игроков могут быть отрицательными</value>
  </data>
  <data name="CardIsNotSuitable" xml:space="preserve">
    <value>Выбранная карта не подходит для выполнения хода</value>
  </data>
  <data name="CardNotSelected" xml:space="preserve">
    <value>Не выбрана карта для выполнения хода</value>
  </data>
  <data name="CardValue_Ace" xml:space="preserve">
    <value>Т</value>
  </data>
  <data name="CardValue_Jack" xml:space="preserve">
    <value>В</value>
  </data>
  <data name="CardValue_King" xml:space="preserve">
    <value>К</value>
  </data>
  <data name="CardValue_Queen" xml:space="preserve">
    <value>Д</value>
  </data>
  <data name="EightShouldBeCovered" xml:space="preserve">
    <value>Восьмёрку обязательно нужно покрыть</value>
  </data>
  <data name="FinishGame" xml:space="preserve">
    <value>Завершить игру?</value>
  </data>
  <data name="LoseMessage" xml:space="preserve">
    <value>Эта игра проиграна</value>
  </data>
  <data name="LoseRoundMessage" xml:space="preserve">
    <value>Вы проиграли в этом раунде</value>
  </data>
  <data name="OrderSuit" xml:space="preserve">
    <value>Закажите масть</value>
  </data>
  <data name="PCScore" xml:space="preserve">
    <value>Компьютер: </value>
  </data>
  <data name="PlayerScore" xml:space="preserve">
    <value>Игрок: </value>
  </data>
  <data name="WinMessage" xml:space="preserve">
    <value>ВЫ ПОБЕДИЛИ В ЭТОЙ ИГРЕ!!!</value>
  </data>
  <data name="WinRoundMessage" xml:space="preserve">
    <value>Вы победили в этом раунде!</value>
  </data>
  <data name="BeginTheGame" xml:space="preserve">
    <value>&amp;Начать игру</value>
  </data>
  <data name="GetHelp" xml:space="preserve">
    <value>&amp;Справка</value>
  </data>
  <data name="SkipTurn" xml:space="preserve">
    <value>&amp;Пропустить ход</value>
  </data>
  <data name="TakeCard" xml:space="preserve">
    <value>&amp;Взять карту</value>
  </data>
</root>